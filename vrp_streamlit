#!pip install ortools streamlit streamlit_folium
import streamlit as st
import random
import time
from datetime import datetime, timedelta
from geopy.distance import geodesic
from ortools.constraint_solver import pywrapcp, routing_enums_pb2
import pandas as pd
import folium
from streamlit_folium import st_folium

# ------------------- CONFIGURATION ------------------- #
DEPOT_LOCATION = (12.9716, 77.5946)
VEHICLE_SPEED_KMPH = 3000  # assume constant speed

# ------------------- STATE ------------------- #
if "all_orders" not in st.session_state:
    st.session_state.all_orders = []
    st.session_state.available_virtual_vehicles = []
    st.session_state.out_for_delivery = []
    st.session_state.delivery_log = []
    st.session_state.vehicle_pool = [
        {"id": "V1", "max_vol": 100, "max_weight": 200, "available_at": datetime.now(), "trip_count": 0},
        {"id": "V2", "max_vol": 100, "max_weight": 200, "available_at": datetime.now(), "trip_count": 0},
        {"id": "V3", "max_vol": 100, "max_weight": 200, "available_at": datetime.now(), "trip_count": 0},
    ]
    st.session_state.order_id = 0

# ------------------- HELPERS ------------------- #
def travel_time_km(loc1, loc2):
    distance_km = geodesic(loc1, loc2).km
    return (distance_km / VEHICLE_SPEED_KMPH) * 60  # in minutes

def generate_random_order(i):
    lat = round(random.uniform(12.95, 12.99), 5)
    lon = round(random.uniform(77.55, 77.65), 5)
    priority = random.choice([1, 2])
    wait_time = 30 if priority == 1 else 60
    return {
        "id": f"O{i}",
        "location": (lat, lon),
        "volume": random.randint(10, 30),
        "weight": random.randint(5, 20),
        "priority": priority,
        "wait_time": wait_time,
        "arrival_time": datetime.now()
    }

def can_reach_in_time(order, depot, vehicle_available_at):
    travel_minutes = travel_time_km(depot, order["location"])
    latest_delivery = order["arrival_time"] + timedelta(minutes=order["wait_time"])
    expected_delivery = vehicle_available_at + timedelta(minutes=travel_minutes)
    return expected_delivery <= latest_delivery

# ------------------- VRP SOLVER ------------------- #
def assign_orders(orders, vehicles):
    if not orders or not vehicles:
        return [], []

    MAX_ORDERS_PER_VEHICLE = 3

    all_locations = [DEPOT_LOCATION] + [order["location"] for order in orders]
    distance_matrix = [
        [int(geodesic(loc1, loc2).km * 1000) for loc2 in all_locations]
        for loc1 in all_locations
    ]
    volumes = [order["volume"] for order in orders]
    weights = [order["weight"] for order in orders]
    manager = pywrapcp.RoutingIndexManager(len(distance_matrix), len(vehicles), 0)
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        return distance_matrix[manager.IndexToNode(from_index)][manager.IndexToNode(to_index)]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Order count constraint
    def demand_callback(from_index):
        from_node = manager.IndexToNode(from_index)
        return 0 if from_node == 0 else 1
    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index, 0,
        [MAX_ORDERS_PER_VEHICLE] * len(vehicles),
        True, "OrderCount"
    )

    # Volume constraint
    def volume_callback(from_index):
        node = manager.IndexToNode(from_index)
        return 0 if node == 0 else volumes[node - 1]
    volume_callback_index = routing.RegisterUnaryTransitCallback(volume_callback)
    routing.AddDimensionWithVehicleCapacity(
        volume_callback_index, 0, [v["max_vol"] for v in vehicles], True, 'Volume')

    # Weight constraint
    def weight_callback(from_index):
        node = manager.IndexToNode(from_index)
        return 0 if node == 0 else weights[node - 1]
    weight_callback_index = routing.RegisterUnaryTransitCallback(weight_callback)
    routing.AddDimensionWithVehicleCapacity(
        weight_callback_index, 0, [v["max_weight"] for v in vehicles], True, 'Weight')

    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
    search_parameters.time_limit.seconds = 2
    solution = routing.SolveWithParameters(search_parameters)

    assigned_orders = []
    if solution:
        for v_id in range(len(vehicles)):
            index = routing.Start(v_id)
            route = []
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                if node_index != 0:
                    order = orders[node_index - 1]
                    route.append(order)
                index = solution.Value(routing.NextVar(index))
            if route:
                assigned_orders.append((vehicles[v_id], route))
    return assigned_orders, []

# ------------------- STREAMLIT UI ------------------- #
st.title("ðŸšš Dynamic Vehicle Routing Simulation")

col1, col2 = st.columns([2,1])
with col2:
    if st.button("âž• Generate New Order"):
        order = generate_random_order(st.session_state.order_id)
        st.session_state.all_orders.append(order)
        st.session_state.order_id += 1
        st.success(f"Order {order['id']} created!")

# Assign vehicles
valid_orders = [o for o in st.session_state.all_orders if can_reach_in_time(o, DEPOT_LOCATION, datetime.now()) and o["id"] not in [x["order_id"] for x in st.session_state.delivery_log]]

if valid_orders:
    assignments, _ = assign_orders(valid_orders, st.session_state.vehicle_pool)
    for v, orders_assigned in assignments:
        for o in orders_assigned:
            st.session_state.delivery_log.append({"order_id": o["id"], "vehicle_id": v["id"], "assigned_at": datetime.now()})

# ------------------- VISUALIZATION ------------------- #

# Folium Map
m = folium.Map(location=DEPOT_LOCATION, zoom_start=13)

# Depot
folium.Marker(DEPOT_LOCATION, icon=folium.Icon(color="green", icon="home"), popup="Depot").add_to(m)

# Orders
for order in st.session_state.all_orders:
    folium.Marker(order["location"], popup=f"{order['id']} | P{order['priority']}", icon=folium.Icon(color="blue", icon="shopping-cart")).add_to(m)

st_data = st_folium(m, width=700, height=500)

# Orders DataFrame
st.subheader("ðŸ“¦ Orders")
st.dataframe(pd.DataFrame(st.session_state.all_orders))

# Delivery Log
st.subheader("âœ… Delivery Assignments")
st.dataframe(pd.DataFrame(st.session_state.delivery_log))
